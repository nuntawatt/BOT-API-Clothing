import joblib
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
MODEL_PATH = "trained_voting_classifierV3.pkl"
model = joblib.load(MODEL_PATH) if MODEL_PATH else None

# ‡πÅ‡∏°‡∏õ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠
SIZE_MAP = {
    0: "XS",
    1: "S",
    2: "M",
    3: "L",
    4: "XL",
    5: "XXL"
}

# ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
FEATURES = ["age", "height", "weight"]

app = Flask(__name__)
CORS(app)

@app.route("/")
def home():
    return jsonify({"message": "Flask API for size prediction is running"})

@app.route("/predict", methods=["POST"])
def predict():
    try:
        data = request.get_json()
        print(f"üîπ Received Data: {data}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if not all(key in data for key in FEATURES):
            return jsonify({"error": "Missing required fields"}), 400

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
        input_values = np.array([[float(data["age"]), float(data["height"]), float(data["weight"])]])
        print(f"Features: {input_values}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if model is None:
            return jsonify({"error": "Model not found"}), 500

        # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠
        prediction = model.predict(input_values)[0]
        size_prediction = SIZE_MAP.get(prediction, "Unknown Size")

        print(f"Prediction: {size_prediction}")
        return jsonify({"prediction": size_prediction})

    except Exception as e:
        print(f"Server Error: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000, debug=True)
